package com.deep4j;

import com.deep4j.activations.Sigmoid;
import com.deep4j.activations.Tanh;
import com.deep4j.layers.Dense;
import com.deep4j.losses.MeanSquaredError;
import com.deep4j.optimizers.SGD;
import org.ejml.data.DMatrixRMaj;
import org.ejml.simple.SimpleMatrix;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TrainerIntegrationTest {
    private Trainer trainer;
    private Network net;

    @BeforeEach
    void setUp() {
        SimpleMatrix[] paramLayerOne = new SimpleMatrix[2];
        SimpleMatrix[] paramLayerTwo = new SimpleMatrix[2];

        paramLayerOne[0] = new SimpleMatrix(new DMatrixRMaj(
                new double[]{
                        -0.20470765948471295, 0.47894333805754824, -0.5194387150567381, -0.55573030434749, 1.9657805725027142, 1.3934058329729904, 0.09290787674371767, 0.2817461528302025, 0.7690225676118387, 1.2464347363862822, 1.0071893575830049, -1.2962211091122635, 0.274991633432124, 0.22891287893531592, 1.3529168351654497, 0.8864293405915888, -2.0016373096603974, -0.3718425371402544, 1.6690253095248706, -0.4385697358355719, -0.5397414455216628, 0.4769850104122995, 3.248943919430755, -1.0212275243555968, -0.5770873030407672, 0.12412127567340774, 0.3026135619125114, 0.5237720681504165, 0.0009402777753328851, 1.3438097936141322, -0.7135439850963832, -0.831153538853914, -2.3702316539567447, -1.8607607885507347, -0.8607573984317486, 0.5601452930280342, -1.2659344916936925, 0.11982712466055132, -1.0635124480535407, 0.3328827156076713, -2.3594188073836815, -0.1995429553356675, -1.5419955278741118, -0.9707359122591825, -1.3070302509708969, 0.2863497470141551, 0.37798411093737727, -0.7538865347898971, 0.33128565019451905, 1.3497422144987854, 0.06987668883075149, 0.246674109982228, -0.011861601071082155, 1.0048115907870796, 1.327194613785634, -0.9192615577450494, -1.5491064382844495, 0.0221845986581725, 0.7583631450155793, -0.6605243277245674, 0.862580082530047, -0.010031902088745189, 0.05000935590418329, 0.6702155943502536, 0.8529650322400435, -0.9558688522944143, -0.023493320691830785, -2.304233878797142, -0.6524688414608951, -1.2183019765811387, -1.3326097076833228, 1.0746226900949811, 0.7236415052979249, 0.6900018528091594, 1.0015434424937888, -0.5030873913603446, -0.6222742250596455, -0.9211686080130108, -0.726213492660829, 0.2228955458351768, 0.05131610092088799, -1.157719466312724, 0.816706935890623, 0.43360960565412143, 1.0107369460036126, 1.824875211346031, -0.997518247710455, 0.850591098736913, -0.1315776012120293, 0.9124141520423159, 0.18821068043622677, 2.169461437689954, -0.11492820458284199, 2.0036973624165357, 0.02961015231428509, 0.795253155861325, 0.11810975369054981, -0.7485315484917335, 0.5849697378523505, 0.1526765727999654, -1.5656572938161821, -0.5625401880747255, -0.032664139158833747, -0.9290062022343519, -0.4825726456604974, -0.03626384610141546, 1.0953900601394428, 0.9809284774873069, -0.5894876862034818, 1.5817000941954544, -0.5287348261234561, 0.45700187129607756, 0.929968758973526, -1.5692706052019187, -1.0224869780458736, -0.40282692441294227, 0.22048686326518568, -0.19340110790052306, 0.6691583364652774, -1.6489848195028172, -2.252797246802002, -1.1668322162652183, 0.3536071020745295, 0.7021101714787903, -0.27456920456686057, -0.13914218812159282, 0.10765722150117704, -0.6065451253347981, -0.4170644082280242, -0.017007036826230656, -1.2241452841933789, -1.8008399134993083, 1.6347362046100804, 0.9890083019292392, 0.457940143094366, 0.5551544103208773, 1.3067197249272955, -0.44055357019668373, -0.30135027988037755, 0.49879148991260985, -0.8239910398915533, 1.3205658426320692, 0.5079647857964771, -0.6534376750873344, 0.18697951413789668, -0.3917252488843284, -0.2722929752403272, -0.01714143563196765, 0.6803207487415016, 0.6355123566677972, -0.7571765024398089, 0.718085834476401, -0.3042730759771454, -1.6777902457616767, 0.4269860851488666, -1.5637398457298897, -0.3674875214829386, 1.0459125332554031, 1.2199543649206168, -0.24769911619661206, -0.41623213175100804, -0.11674700426207262, -1.8447876161031722, 2.068707851251932, -0.7769674735942644, 1.4401668688265257, -0.11055735956475293, 1.2273869948457277, 1.9207842618523894, 0.7464330382405007, 2.2246595901604924, -0.6794004104983025, 0.7273687815805084, -0.8687307343795062, -1.2138509055683302, -0.470630931215483, -0.9192416970835028, -0.8388266886335007, 0.43515530456279905, -0.5578047171343563, -0.5674548710052342, -0.3726415527126837, -0.9265569012593711, 1.755108385805539, 1.2098099860822769, 1.2700247317379743, -0.974378126503341, -0.6347092552109234, -0.3957007523362245, -0.28943589994496655, -0.7342970719242314, -0.7285046785101044, 0.8387750726740476, 0.26689321273107297, 0.7211943388971639, 0.9109826418929284
                }
        ));
        paramLayerOne[0].reshape(14, 14);

        paramLayerOne[1] = new SimpleMatrix(new DMatrixRMaj(
                new double[]{
                        -1.0209026132606855, -1.4134160387984331, 1.2966078419968168, 0.25227520888346866, 1.1274811035573475, -0.5683634468680876, 0.3093621681249876, -0.5773854727578258, -1.16863407332615, -0.8250199718303938, -2.6444094904239193, -0.1529858033470292, -0.7519210030539472, -0.13260925192977202
                }
        ));
        paramLayerOne[1].reshape(1, 14);


        paramLayerTwo[0] = new SimpleMatrix(new DMatrixRMaj(
                new double[]{
                        -0.20470765948471295, 0.47894333805754824, -0.5194387150567381, -0.55573030434749, 1.9657805725027142, 1.3934058329729904, 0.09290787674371767, 0.2817461528302025, 0.7690225676118387, 1.2464347363862822, 1.0071893575830049, -1.2962211091122635, 0.274991633432124, 0.22891287893531592
                }
        ));
        paramLayerTwo[0].reshape(14, 1);

        paramLayerTwo[1] = new SimpleMatrix(new DMatrixRMaj(
                new double[]{
                        1.3529168351654497
                }
        ));
        paramLayerTwo[1].reshape(1, 1);

        net = new Network(Arrays.asList(
                new Dense(14, Arrays.asList(paramLayerOne), new Tanh()),
                new Dense(1, Arrays.asList(paramLayerTwo), new Sigmoid())
        ), 12345, new MeanSquaredError(false));

        trainer = new Trainer(new SGD(0.1, net));
    }

    private SimpleMatrix dataset(int skipIdx) {
        double[][] data = new double[][]{
                new double[]{56,4.55,34,44,0,20,0,162,57,23,10,35,179,0,0},
                new double[]{53,4.32,36,40,0,19,0,171,62,19,12,0,183,0,0},
                new double[]{58,4.1,39,41,0,35,0,172,58,31,16,25,185,0,1},
                new double[]{53,4.07,38,44,0,20,0,174,68,26,14,25,189,0,0},
                new double[]{54,3.94,37,42,0,24,0,175,66,30,12,0,184,0,0},
                new double[]{51,3.93,38,38,0,29,0,165,61,31,16,0,180,0,0},
                new double[]{52,3.77,34,40,0,24,0,157,50,31,16,0,173,0,0},
                new double[]{53,3.65,33,42,0,21,0,165,61,21,10,25,185,0,0},
                new double[]{54,3.63,38,38,0,18,0,172,50,20,12,7,172,0,0},
                new double[]{50,3.42,35,38,0,20,0,157,48,22,14,0,179,0,0},
                new double[]{53,3.35,33,41,0,27,0,164,62,37,14,0,170,0,0},
                new double[]{51,3.27,36,40,0,24,0,168,53,29,16,0,181,0,0},
                new double[]{52,3.23,36,38,0,31,0,164,57,35,16,0,183,0,0},
                new double[]{53,3.2,33,41,0,21,0,155,55,25,14,25,183,0,0},
                new double[]{53,3.15,34,40,0,29,0,167,60,30,16,25,182,0,0},
                new double[]{48,3.11,33,37,0,28,0,158,54,39,10,0,171,0,0},
                new double[]{48,3.03,35,39,0,27,0,162,62,27,14,0,178,0,0},
                new double[]{48,2.92,33,34,0,26,0,167,64,25,12,25,175,0,0},
                new double[]{53,2.9,34,39,0,19,0,165,57,23,14,2,193,0,0},
                new double[]{43,2.65,32,33,0,24,0,149,45,26,16,0,169,1,0},
                new double[]{53,3.64,38,40,1,20,2,170,59,24,12,12,185,0,0},
                new double[]{51,3.14,33,41,1,22,7,160,53,24,16,12,176,0,0},
                new double[]{50,2.78,30,37,1,19,7,165,60,20,14,0,183,0,0},
                new double[]{50,2.51,35,39,1,22,7,159,52,23,14,25,200,1,0},
                new double[]{48,2.37,30,37,1,20,7,163,47,20,10,35,185,1,0},
                new double[]{46,2.05,32,35,1,41,7,166,57,37,14,25,173,1,1},
                new double[]{48,1.92,30,33,1,20,7,161,50,20,10,35,180,1,0},
                new double[]{58,4.57,39,41,1,32,12,173,70,38,14,25,180,0,0},
                new double[]{53,3.59,34,40,1,31,12,163,49,41,12,50,191,0,0},
                new double[]{49,3.32,36,40,1,27,12,152,48,37,12,25,170,0,0},
                new double[]{52,3,35,38,1,30,12,165,64,38,14,50,180,0,0},
                new double[]{51,3.32,38,39,1,23,17,157,48,32,12,25,169,0,0},
                new double[]{50,2.74,33,39,1,21,17,156,53,24,12,7,179,0,0},
                new double[]{50,3.87,33,45,1,28,25,163,54,30,16,0,183,0,0},
                new double[]{52,3.86,36,39,1,30,25,170,78,40,16,50,178,0,0},
                new double[]{53,3.55,37,41,1,37,25,161,66,46,16,0,175,0,1},
                new double[]{52,3.53,37,40,1,26,25,170,62,30,10,25,181,0,0},
                new double[]{52,3.41,33,39,1,23,25,181,69,23,16,2,181,0,0},
                new double[]{49,3.18,34,38,1,31,25,162,57,32,16,50,194,0,0},
                new double[]{53,3.19,34,41,1,27,35,163,51,31,16,25,185,0,0},
                new double[]{47,2.66,33,35,1,20,35,170,57,23,12,50,186,1,0},
                new double[]{53,2.75,32,40,1,37,50,168,61,31,16,0,173,0,1},
        };

        double[][] mat;
        if(skipIdx < 0) {
            mat = new double[data.length][1];
            for(int i = 0; i < data.length; i++) {
                mat[i][0] = data[i][(-1 * skipIdx)];
            }
        } else {
            mat = new double[data.length][data[0].length - 1];
            for(int i = 0; i < data.length; i++) {
                int k = 0;
                for(int j = 0; j < data[i].length; j++) {
                    if(skipIdx != j) {
                        mat[i][k] = data[i][j];
                        k++;
                    }
                }
            }
        }

        return new SimpleMatrix(mat);
    }


    @Test
    void fit() {
        TrainInfo info = new TrainInfo(
                dataset(1),
                dataset(-1),
                dataset(1),
                dataset(-1),
                (net1, trainInfo) -> {}
        );
        info.epochs = 50;

        trainer.fit(info);

        SimpleMatrix testPredictions = net.forward(info.obsTest);
        double loss = this.net.loss.forward(testPredictions, info.targetTest);
        assertEquals(5.716131397948258, loss, 0.00001);
    }
}
